import tkinter as tk
from tkinter import filedialog, messagebox, Label, Toplevel, Button, Text
from PIL import Image, ImageTk
import os
import numpy as np

from deCainify import DeCainify

class App:
    def __init__(self, root):
        super().__init__()
        self.root = root
        self.root.title("deCainify GUI")
        #self.root.geometry('400x200')
        self.root.grid_columnconfigure(0, weight=1)  # Entry column
        self.root.grid_columnconfigure(4, weight=0)  # Button column (no stretch)

        self.file_path = tk.StringVar()
        self.entry = tk.Entry(root, textvariable=self.file_path)
        self.entry.config(state='readonly')
        self.entry.grid(row=0, column=0, columnspan=4, padx=5, pady=5,sticky="ew")
        self.select_button = tk.Button(root, text="Select", command=self.select_file)
        self.select_button.grid(row=0, column=4, columnspan=2, padx=5, pady=5,sticky="ew")

        # Info Text
        self.info_label = tk.Label(root, text="Select your FO2 executable", fg="blue")
        self.info_label.grid(row=1, column=0, columnspan=6, pady=5, sticky="ew")

        # BMP Elements (Generated by code)
        img = Image.new('RGB', (48, 48), color=(96, 96, 96))
        bmp_original_48x48 = ImageTk.PhotoImage(img)
        self.label0 = Label(root, image=bmp_original_48x48)
        self.label0.image = bmp_original_48x48
        self.label0.grid(row=2, column=0, columnspan=2, padx=5, pady=5)

        img = Image.new('RGB', (32, 32), color=(128, 128, 128))
        bmp_original_32x32 = ImageTk.PhotoImage(img)
        self.label1 = Label(root, image=bmp_original_32x32)
        self.label1.image = bmp_original_32x32
        self.label1.grid(row=2, column=2, columnspan=2, padx=5, pady=5)

        img = Image.new('RGB', (48, 48), color=(128, 128, 128))
        bmp_new_48x48 = ImageTk.PhotoImage(img)
        self.label2 = Label(root, image=bmp_new_48x48)
        self.label2.image = bmp_new_48x48
        self.label2.grid(row=2, column=4, columnspan=2, padx=5, pady=5)

        # "Save As" Button
        self.save_button = tk.Button(root, text="Save As", command=self.save_file)
        self.save_button.grid(row=3, column=0, columnspan=6, padx=5, pady=5, sticky="ew")

    def select_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Executable files", "*.exe")])
        if file_path:
            print('Opening', file_path)
            self.file_path.set(file_path)
            self.dc = DeCainify(file_path)
            self.dc.process()
            self.dc.print_mask()
            self.set_bmps()

    def set_bmps(self):
      new_img = ImageTk.PhotoImage(Image.fromarray(self.dc.rgb_image_48x48[::-1, :, ::-1]))
      self.label0.config(image=new_img)
      self.label0.image = new_img

      new_img = ImageTk.PhotoImage(Image.fromarray(self.dc.rgb_image_32x32[::-1, :, ::-1]))
      self.label1.config(image=new_img)
      self.label1.image = new_img

      new_img = ImageTk.PhotoImage(Image.fromarray(np.array(self.dc.resampled_image)[::-1, :, ::-1]))
      self.label2.config(image=new_img)
      self.label2.image = new_img

    def show_copyable_message(self, title, message):
      popup = Toplevel()
      popup.title(title)
      text = Text(popup, wrap="word", height=10, width=40)
      text.insert("1.0", message)
      text.config(state="disabled")  # Make it read-only but selectable
      text.pack(padx=10, pady=10)
      Button(popup, text="OK", command=popup.destroy).pack(pady=5)
      
    def save_file(self):
        if not self.file_path.get():
            messagebox.showerror("Error", "Please select an .exe file first")
            return

        filetypes = [("EXE files", "*.exe"), ("ICO files", "*.ico")]
        save_path = filedialog.asksaveasfilename(filetypes=filetypes, defaultextension=filetypes)

        if save_path:
            ext = os.path.splitext(save_path)[1].lower()
            if ext == ".ico":
                ret = self.dc.save_ico(save_path)
                if ret == -1:
                    messagebox.showerror("Error", "Was not able to save " + save_path)
                else:
                    messagebox.showinfo("Done!", "Saved " + save_path + ' succesfully!')
            elif ext == ".exe":
                print('Saving', save_path)
                crc = self.dc.save_exe(save_path)
                if crc == -1:
                    print('Error')
                    messagebox.showerror("Error", "Was not able to save " + save_path)
                else:
                    print('Done', crc)
                    messagebox.showinfo("Done!", save_path + ' saved succesfully!')
                    self.show_copyable_message("Info", f'If you use sfall, add CRC to your ddraw.ini (comma separated list):\n\nExtraCRC={crc}')
                    

if __name__ == "__main__":
    root = tk.Tk()
    app = App(root)
    root.mainloop()